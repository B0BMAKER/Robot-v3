"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const error_1 = require("../error");
const axios_1 = require("axios");
class Client {
    constructor(baseURL, apikey) {
        this.baseURL = baseURL;
        this.apikey = apikey;
        this.client = axios_1.default.create({
            baseURL: this.baseURL,
            headers: {
                apikey: this.apikey,
            },
            timeout: 30000,
        });
    }
    get(path, params, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client
                .get(path, Object.assign({ params }, options))
                .then((res) => {
                if ((options === null || options === void 0 ? void 0 : options.responseType) === 'arraybuffer') {
                    return res.data;
                }
                return res.data.result;
            })
                .catch((err) => {
                var _a;
                throw new error_1.LoLHumanError(err === null || err === void 0 ? void 0 : err.name, ((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.data.message) || (err === null || err === void 0 ? void 0 : err.message));
            });
        });
    }
    post(path, data, params, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client
                .post(path, data.getBuffer(), Object.assign({ params, headers: { 'content-type': `multipart/form-data; boundary=${data.getBoundary()}` } }, options))
                .then((res) => {
                if ((options === null || options === void 0 ? void 0 : options.responseType) === 'arraybuffer') {
                    return res.data;
                }
                return res.data.result;
            })
                .catch((err) => {
                var _a;
                throw new error_1.LoLHumanError(err === null || err === void 0 ? void 0 : err.name, ((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.data.message) || (err === null || err === void 0 ? void 0 : err.message));
            });
        });
    }
}
exports.Client = Client;
