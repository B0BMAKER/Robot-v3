/// <reference types="node" />
export declare class LoLHuman {
    readonly apikey: string;
    constructor(apikey: string);
    private readonly client;
    youtubeSearch(query: string): Promise<any[]>;
    youtubeAudio(url: string): Promise<any>;
    youtubeVideo(url: string): Promise<any>;
    youtubeAudio2(url: string): Promise<any>;
    youtubeVideo2(url: string): Promise<any>;
    youtubePlay(query: string): Promise<any>;
    tiktokMusic(url: string): Promise<Buffer>;
    tiktokWM(url: string): Promise<Buffer>;
    tiktokNoWM(url: string): Promise<any>;
    tiktokNoWM2(url: string): Promise<string>;
    tiktokNoWM3(url: string): Promise<string>;
    facebook(url: string): Promise<string>;
    facebook2(url: string): Promise<string>;
    joox(joox_id: string): Promise<any>;
    jooxPlay(query: string): Promise<any>;
    spotify(url: string): Promise<any>;
    spotifySearch(query: string): Promise<any[]>;
    twitterImage(url: string): Promise<any>;
    twitterVideo(url: string): Promise<any>;
    twitterVideo2(url: string): Promise<any>;
    instagram(url: string): Promise<string[]>;
    instagram2(url: string): Promise<any>;
    instagramReel(url: string): Promise<any>;
    instagramHighlights(username: string): Promise<string[]>;
    instagramStory(username: string): Promise<string[]>;
    cocofun(url: string): Promise<any>;
    smule(url: string): Promise<any>;
    sharechat(url: string): Promise<any>;
    pinterestDL(url: string): Promise<{
        [_: string]: string;
    }>;
    pinterestVideo(url: string): Promise<{
        [_: string]: string;
    }>;
    telestick(url: string): Promise<{
        name: string;
        title: string;
        sticker: string[];
    }>;
    linestick(url: string): Promise<{
        title: string;
        stickers: string[];
    }>;
    zippyshare(url: string): Promise<any>;
    mediafire(url: string): Promise<any>;
    solidfiles(url: string): Promise<any>;
    apkDownloader(pkg: string): Promise<any>;
    xnxx(url: string): Promise<any>;
    xnxxSearch(query: string): Promise<any[]>;
    pixivDL(pixiv_id: string): Promise<Buffer>;
    quran(surah?: number, ayat?: number): Promise<any>;
    quranAudio(surah: number, ayat?: number): Promise<Buffer>;
    haditsSearch(query: string): Promise<any>;
    haditsDetail(kitab: string, nomor: number): Promise<any>;
    jadwalSholat(daerah: string): Promise<any>;
    niatSholat(sholat: 'subuh' | 'dzuhur' | 'ashar' | 'maghrib' | 'isya'): Promise<any>;
    asmaulHusna(): Promise<any>;
    kisahNabi(nabi: string): Promise<any>;
    lk21(query: string): Promise<any>;
    drakor(query: string): Promise<any>;
    drakorOngoing(): Promise<any>;
    wattpad(url: string): Promise<any>;
    wattpadSearch(query: string): Promise<any[]>;
    webtoon(url: string): Promise<any>;
    mangatoon(url: string): Promise<any>;
    cerpen(): Promise<any>;
    ceritaHoror(): Promise<any>;
    textprome(type: 'blackpink' | 'neon' | 'greenneon' | 'futureneon' | 'sandwriting' | 'sandsummer' | 'sandengraved' | 'metaldark' | 'neonlight' | 'holographic' | 'text1917' | 'minion' | 'deluxesilver' | 'newyearcard' | 'bloodfrosted' | 'halloween' | 'jokerlogo' | 'fireworksparkle' | 'natureleaves' | 'bokeh' | 'toxic' | 'strawberry' | 'box3d' | 'roadwarning' | 'breakwall' | 'icecold' | 'luxury' | 'cloud' | 'summersand' | 'horrorblood' | 'magma' | 'impressiveglitch' | 'harrypotter' | 'thunder' | 'watercolor' | 'wonderfulgraffiti', text: string): Promise<Buffer>;
    textprome2(type: 'pornhub' | 'glitch' | 'avenger' | 'space' | 'ninjalogo' | 'marvelstudio' | 'lionlogo' | 'wolflogo' | 'steel3d' | 'wallgravity' | 'coolgravity', text1: string, text2: string): Promise<Buffer>;
    photooxy1(type: 'shadow' | 'cup' | 'glowingneon' | 'romance' | 'smoke' | 'burnpaper' | 'cup1' | 'naruto' | 'lovemessage' | 'undergrass' | 'love' | 'coffe' | 'woodheart' | 'flowerheart' | 'woodenboard' | 'summer3d' | 'wolfmetal' | 'nature3d' | 'underwater' | 'golderrose' | 'summernature' | 'letterleaves' | 'fallleaves' | 'flamming' | 'harrypotter' | 'carvedwood', text: string): Promise<Buffer>;
    photooxy2(type: 'tiktok' | 'arcade8bit' | 'battlefield4' | 'pubg', text1: string, text2: string): Promise<any>;
    ephoto1(type: 'wetglass' | 'multicolor3d' | 'watercolor' | 'luxurygold' | 'galaxywallpaper' | 'lighttext' | 'beautifulflower' | 'puppycute' | 'royaltext' | 'heartshaped' | 'birthdaycake' | 'galaxystyle' | 'hologram3d' | 'greenneon' | 'glossychrome' | 'greenbush' | 'metallogo' | 'noeltext' | 'glittergold' | 'textcake' | 'starsnight' | 'wooden3d' | 'textbyname' | 'writegalacy' | 'galaxybat' | 'snow3d' | 'birthdayday' | 'pubgmaskot' | 'goldplaybutton' | 'silverplaybutton' | 'freefire' | 'cartoongravity' | 'anonymhacker' | 'mlwall' | 'aovwall' | 'logogaming' | 'fpslogo' | 'avatarlolnew' | 'avatardota' | 'angelwing' | 'lolavatar' | 'lolcover', text: string): Promise<Buffer>;
    ephoto2(type: 'juventusshirt' | 'cutegravity' | 'realvintage' | 'codwarzone', text1: string, text2: string): Promise<Buffer>;
    konachan(query: string): Promise<Buffer>;
    danbooru(query: string): Promise<Buffer>;
    wallpaper(query: string): Promise<string>;
    wallpaper2(query: string): Promise<string>;
    wallpaper3(query: string): Promise<string[]>;
    gsearch(query: string): Promise<any[]>;
    gimage(query: string): Promise<Buffer>;
    gimage2(query: string): Promise<string[]>;
    stickerwa(query: string): Promise<{
        title: string;
        author: string;
        url: string;
        stickers: string[];
    }[]>;
    pinterest(query: string): Promise<string>;
    pinterest2(query: string): Promise<string[]>;
    pixiv(query: string): Promise<Buffer>;
    pixiv2(query: string): Promise<string[]>;
    unsplash(query: string): Promise<string[]>;
    reverseYandex(img: string): Promise<string>;
    googleReverse(img: Buffer): Promise<string>;
    musicSearch(file: Buffer): Promise<string>;
    moddroid(query: string): Promise<any>;
    domainSearch(query: string): Promise<{
        name: string;
        price: number;
    }[]>;
    domainCheck(query: string): Promise<'unavailable' | 'available'>;
    searchPlace(query: string): Promise<any>;
    searchBijak(query: string): Promise<any>;
}
