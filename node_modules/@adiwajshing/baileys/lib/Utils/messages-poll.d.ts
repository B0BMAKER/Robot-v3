export declare const getCrypto: () => Crypto;
/**
     * Compare the SHA-256 hashes of the poll options from the update to find the original choices
     * @param options Options from the poll creation message
     * @param pollOptionHash hash from `decryptPollMessageRaw()`
     * @return {Promise<string[]>} the original option, can be empty when none are currently selected
     */
export declare const comparePollMessage: (options: string[], pollOptionHashes: string[]) => Promise<string[]>;
/**
     * Decode the message from `decryptPollMessageInternal()`
     * @param decryptedMessage the message from `decrpytPollMessageInternal()`
     * @return {string}
     */
export declare const decodePollMessage: (decryptedMessage: Uint8Array) => string;
/**
     * decrypt a poll message update
     * @param encPayload from the update
     * @param encIv from the update
     * @param encKey from the original poll
     * @param pollMsgSender sender jid of the pollCreation message
     * @param pollMsgId id of the pollCreation message
     * @param voteMsgSender sender of the pollUpdate message
     * @return {Promise<string[]>} The option or empty array if something went wrong OR everything was unticked
     */
export declare const decryptPollMessageRaw: (encKey: Uint8Array, encPayload: Uint8Array, encIv: Uint8Array, pollMsgSender: string, pollMsgId: string, voteMsgSender: string) => Promise<string[]>;
